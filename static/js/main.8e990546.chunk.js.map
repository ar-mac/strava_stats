{"version":3,"sources":["components/ActivityCard.jsx","api/getActivities.js","App.js","serviceWorker.js","index.js"],"names":["ActivityCard","activity","this","props","react_default","a","createElement","className","name","type","moment","startDate","format","distance","toFixed","totalElevationGain","maxSpeed","Math","round","movingTime","Component","getActivities","activities","JSON","parse","localStorage","getItem","Promise","resolve","fetch","headers","Content-Type","Authorization","concat","process","then","response","json","data","map","id","start_date","startDateLocal","start_date_local","total_elevation_gain","max_speed","moving_time","kudosCount","kudos_count","averageSpeed","average_speed","setItem","stringify","App","state","_this2","setState","ActivityCard_ActivityCard","key","Boolean","window","location","hostname","match","require","config","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAIqBA,mLAKV,IACCC,EAAaC,KAAKC,MAAlBF,SACR,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,WAAML,EAASO,KAAf,KAAuBP,EAASQ,KAAhC,KACAL,EAAAC,EAAAC,cAAA,WAAMI,IAAOT,EAASU,WAAWC,OAAO,gBACxCR,EAAAC,EAAAC,cAAA,yBAAiBL,EAASY,SAAW,KAAMC,QAAQ,GAAnD,MACAV,EAAAC,EAAAC,cAAA,yBAAiBL,EAASc,mBAA1B,KACAX,EAAAC,EAAAC,cAAA,yBAAiBL,EAASe,SAA1B,QACAZ,EAAAC,EAAAC,cAAA,6BAAqBW,KAAKC,MAAMjB,EAASkB,WAAa,IAAtD,eAdkCC,aCuB3B,SAASC,IACtB,IAAMC,EAAaC,KAAKC,MAAMC,aAAaC,QAAQ,eACnD,OAAIJ,EACK,IAAIK,QAAQ,SAACC,GAAD,OAAaA,EAAQN,KA7BnCO,MAAM,sEAAuE,CAClFC,QAAS,CACPC,eAAgB,mBAChBC,cAAA,UAAAC,OAA2BC,+CAE5BC,KAAK,SAAAC,GACN,OAAOA,EAASC,OAAOF,KAAK,SAACG,GAC3B,IAAMhB,EAAagB,EAAKC,IAAI,SAACtC,GAAD,MAAe,CACzCuC,GAAIvC,EAASuC,GACb/B,KAAMR,EAASQ,KACfD,KAAMP,EAASO,KACfK,SAAUZ,EAASY,SACnBF,UAAWV,EAASwC,WACpBC,eAAgBzC,EAAS0C,iBACzB5B,mBAAoBd,EAAS2C,qBAC7B5B,SAAUf,EAAS4C,UACnB1B,WAAYlB,EAAS6C,YACrBC,WAAY9C,EAAS+C,YACrBC,aAAchD,EAASiD,iBAGzB,OADAzB,aAAa0B,QAAQ,aAAc5B,KAAK6B,UAAU9B,IAC3CA,UCWE+B,6MA3BbC,MAAQ,CACNhC,WAAY,uFAGM,IAAAiC,EAAArD,KAClBmB,IAAgBc,KAAK,SAACb,GACpBiC,EAAKC,SAAS,CAAElC,kDAKlB,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,0BAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACZL,KAAKoD,MAAMhC,YAAcpB,KAAKoD,MAAMhC,WAAWiB,IAAI,SAACtC,GAAD,OAClDG,EAAAC,EAAAC,cAACmD,EAAD,CAAcxD,SAAUA,EAAUyD,IAAKzD,EAASuC,gBApB1CpB,aCOEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,EAAQ,IAAUC,SAElBC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.8e990546.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nexport default class ActivityCard extends Component {\n  static propTypes = {\n    activity: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const { activity } = this.props;\n    return (\n      <div className=\"activities__card\">\n        <div>{activity.name} ({activity.type})</div>\n        <div>{moment(activity.startDate).format('D MMM H:m A')}</div>\n        <div>distance: {(activity.distance / 1000).toFixed(2)}km</div>\n        <div>elevation: {activity.totalElevationGain}m</div>\n        <div>max speed: {activity.maxSpeed}km/h</div>\n        <div>activity time: {Math.round(activity.movingTime / 60)}min</div>\n      </div>\n    );\n  }\n}\n","function fetchActivities() {\n  return fetch(\"https://www.strava.com/api/v3/athlete/activities?page=1&per_page=40\", {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${process.env.REACT_APP_STRAVA_ACCESS_TOKEN}`,\n    },\n  }).then(response => {\n    return response.json().then((data) => {\n      const activities = data.map((activity) => ({\n        id: activity.id,\n        type: activity.type,\n        name: activity.name,\n        distance: activity.distance,\n        startDate: activity.start_date,\n        startDateLocal: activity.start_date_local,\n        totalElevationGain: activity.total_elevation_gain,\n        maxSpeed: activity.max_speed,\n        movingTime: activity.moving_time,\n        kudosCount: activity.kudos_count,\n        averageSpeed: activity.average_speed,\n      }));\n      localStorage.setItem('activities', JSON.stringify(activities));\n      return activities;\n    });\n  });\n}\n\nexport default function getActivities() {\n  const activities = JSON.parse(localStorage.getItem('activities'));\n  if (activities) {\n    return new Promise((resolve) => resolve(activities));\n  } else {\n    return fetchActivities();\n  }\n};\n","import React, {Component}from 'react';\nimport './App.css';\nimport ActivityCard from \"./components/ActivityCard\";\nimport getActivities from \"./api/getActivities\";\n\nclass App extends Component {\n  state = {\n    activities: [],\n  };\n\n  componentDidMount() {\n    getActivities().then((activities) => {\n      this.setState({ activities });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Your strava activities\n        </header>\n        {/*TODO: Aggregate activities per month and display total data*/}\n        <div className=\"activities__container\">\n          {this.state.activities && this.state.activities.map((activity) => (\n            <ActivityCard activity={activity} key={activity.id} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}